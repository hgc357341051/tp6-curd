<?php
declare (strict_types = 1);

namespace {%namespace%};

use {%modelNamespace%};

class {%className%} {
    /**
     * 响应状态
     * @var bool
     */
    public $_code = 404;

    /**相应数据
     * @var null
     */
    public $_data = null;

    /**响应错误信息
     * @var null
     */
    public $_error = null;

    public function read($where=[], $field = '*')
    {
        $model = new {%model%}();
        if($info = $model->field($field)->where($where)->find()){
            $this->_data = $info->toArray();
            return true;
        }else{
            return false;
        }
    }

    public function getList($page = 1, $limit = 10,  $field =  null, $where = [], $order = '{%primaryKey%} desc')
    {
        $model = new {%model%}();
        if($field){
            $model = $model->field($field);
        }
        if(!empty($where)){
            $model = $model->where($where);
        }
        $list = $model->order($order)->paginate(['list_rows' => $limit, 'page' => $page])->toArray();
        
        $this->_data = $list;
        return true;
    }

    public function create($data)
    {
        //验证-添加
        validate('{%validate%}.create')->check($data);     //失败自动抛出异常
        //新增数据
        $model = new {%model%}();
        if($model->save($data)){
            {%event%}
            return true;
        } else {
            $this->_code = 404;
            return false;
        }

    }

    public function update($data,$where=[])
    {
        //验证
        validate('{%validate%}.update')->check($data);     //失败自动抛出异常
        //修改
        if({%model%}::where($where)->update($data, ['{%primaryKey%}' => $data['{%primaryKey%}']])) {
            {%event%}
            return true;
        }else{
            $this->_code = 404;
            return false;
        }

    }

    public function delete($where=[])
    {
        if({%model%}::destroy(function($query) use($where){
            $query->where($where);
        })){
            return true;
        } else {
            return true;
        }

    }
}
